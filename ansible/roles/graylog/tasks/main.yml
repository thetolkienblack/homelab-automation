# SPDX-License-Identifier: MIT-0
---
- name: 'Graylog | Include OS-specific tasks'
  ansible.builtin.include_tasks: "{{ ansible_os_family | lower }}.yml"

# Graylog Server
- name: 'Graylog | Ensure certificate directory exists'
  ansible.builtin.file:
    path: "{{ graylog_server_location }}"
    state: directory
    mode: '0750'
    owner: "{{ graylog_user }}"
    group: "{{ graylog_user }}"
  become: true

- name: 'Graylog | Generate private key for Graylog'
  community.crypto.openssl_privatekey:
    path: "{{ graylog_server_location }}/graylog-key.pem"
    size: 4096
    mode: '0600'
    owner: "{{ graylog_user }}"
    group: "{{ graylog_user }}"
  become: true

- name: 'Graylog | Generate CSR with SAN'
  community.crypto.openssl_csr:
    path: "{{ graylog_server_location }}/graylog.csr"
    privatekey_path: "{{ graylog_server_location }}/graylog-key.pem"
    common_name: "{{ ansible_fqdn }}"
    subject_alt_name:
      - "DNS:{{ ansible_fqdn }}"
      - "IP:{{ ansible_default_ipv4.address }}"
    owner: "{{ graylog_user }}"
    group: "{{ graylog_user }}"
    mode: '0644'
  become: true

- name: 'Graylog | Generate self-signed cert from CSR'
  community.crypto.x509_certificate:
    path: "{{ graylog_server_location }}/graylog-cert.pem"
    privatekey_path: "{{ graylog_server_location }}/graylog-key.pem"
    csr_path: "{{ graylog_server_location }}/graylog.csr"
    provider: selfsigned
    selfsigned_not_after: "+3650d"
    mode: '0644'
    owner: "{{ graylog_user }}"
    group: "{{ graylog_user }}"
    select_crypto_backend: cryptography
  become: true

- name: 'Graylog | Configure Graylog server'
  ansible.builtin.template:
    src: server.conf.j2
    dest: "{{ graylog_server_location }}/server.conf"
    owner: "{{ graylog_user }}"
    group: "{{ graylog_user }}"
    mode: "0644"
  become: true

- name: 'Graylog | Create log4j2 configuration'
  ansible.builtin.template:
    src: log4j2.xml.j2
    dest: /etc/graylog/server/log4j2.xml
    mode: '0644'
    owner: "{{ graylog_user }}"
    group: "{{ graylog_user }}"
  become: true

# MongoDB user creation for Graylog
- name: 'Graylog | Check if graylog user exists in MongoDB'
  ansible.builtin.shell: |
    mongosh graylog --authenticationDatabase admin -u {{ mongodb_admin_user }} -p '{{ mongodb_admin_password }}' --quiet --eval "db.getUser('{{ gl_mongo_username }}')"
  register: graylog_user_check
  changed_when: false
  failed_when: false
  no_log: true

- name: 'Graylog | Create MongoDB user for Graylog'
  ansible.builtin.shell: |
    mongosh graylog --authenticationDatabase admin -u {{ mongodb_admin_user }} -p '{{ mongodb_admin_password }}' --quiet --eval '
      db.createUser({
        user: "{{ gl_mongo_username }}",
        pwd: "{{ gl_mongo_password }}",
        roles: [ 
          { role: "readWrite", db: "{{ gl_mongo_db }}" },
          { role: "dbAdmin", db: "{{ gl_mongo_db }}" }
        ]
      });
    '
  when: graylog_user_check.stdout == "null"
  no_log: true

- name: 'Graylog | Allow web interface via UFW'
  community.general.ufw:
    rule: allow
    port: "{{ graylog_port }}"
    proto: tcp

- name: 'Graylog | Enable and start Graylog service'
  ansible.builtin.systemd:
    name: graylog-server
    enabled: true
    state: started
  become: true

- name: 'Graylog | Wait for web interface'
  ansible.builtin.uri:
    url: "{{ graylog_web_listen_uri }}/api/system"
    method: GET
    status_code: 200
    validate_certs: false
  register: graylog_api_check
  retries: 10
  delay: 10
  until: graylog_api_check.status == 200
